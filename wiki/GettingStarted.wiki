#summary General information on how to start developing with libflexdsp (or extending the project).
#labels Featured,Phase-Requirements,Phase-Implementation

=Build System=
libflexdsp at its current stage is developed in eclipse/CDT and MS Visual C++ 2010 environments. The development work is done mainly in MSVC, because it's a no-brainer syncing eclipse to MSVC, while it requires some work the other way. These are the only "supported" build systems so far. It's very probable that we'll switch to something more sophisticated at some later stage, however currently it's perfectly sufficient. We surely don't want to change the IDEs, so the future build system must be supported by both MSVC and CDT. GNU autotools at this stage is an overkill and I don't know whether its possible to generate CMakefiles from MSVC projects.

=Platforms=
The primary development platform is currently Windows. We test the build with MinGW-GCC and MS Visual C++ compilers. There are also build configurations for Linux-GCC and MacOSX-GCC. They are tested less frequently, however also considered "officially supported" (if there is anything like that). 

=Configuring=
The library is configured by the preprocesssor macros which can be provided during the compilation (in the command line) or in the separate file. If `DSP_USE_CUSTOM_CONFIG` is declared on command line, the preprocessor will include the file `dsp_custom_config.h` from the "include search path". The user may customize the library behavior with this file. See file `dsp++/config.h` for a full list of configuration options and their documentation.

=Dependencies=
libflexdsp incorporates wrappers for some 3rd-party libraries (which may be disabled with configuration options). These libraries include:
  * Boost - currently it is the only "hard" dependency. Although it should be possible to disable it with `DSP_BOOST_DISABLED` macro, currently it's impossible, as the compilation will fail. We're working on this.
  * libsndfile - use `DSP_SNDFILE_DISABLED` to disable.
  * fftw3 - use `DSP_FFTW_DISABLED` to disable.
  * cppunit - only for dsp++-test project, for unit-testing the library.

=Building with Eclipse=
Start with importing the project from SVN. To do that your Eclipse environment must include some plugins for Subversion integration (Subversive from Polarion?). From File menu choose New->Project and then from SVN category "Project from SVN". Configure repository location according to the information on the "Source" tab and import the library from https://libflexdsp.googlecode.com/svn/trunk/dsp++ and the test project from https://libflexdsp.googlecode.com/svn/trunk/dsp++-test (2 projects). Switch the IDE to C/C++ Perspective and build the desired configurations. Easy.

=Documentation=
The source code is documented with doxygen. We recommend that you install doxygen on the development machine and use it to have the documentation always up-to-date. There's even a `dsp++.doxyfile` file with doxygen configuration. To make things easier it's good to install doxygen support for eclipse in the form of Eclox plugin. Then, you can build the documentation with a single click. 

=Examples=
Currently there are only a few usage examples in the form of dsp++-test project. These are by no means comprehensive, yet give some thoughts of how to use the specific features. However we understand the need for some real examples, as the library code sometimes isn't exactly self-explanatory. These will appear as only time allows.

=Typical lightweight usage=
It's not necessary to build and link the whole library. In small, lightweight projects I usually tend to add only specific source files directly to the target project. The library is being developed with such usage pattern in mind, trying to keep most of the code in templates and therefore header files (as in Boost header-only libraries). 